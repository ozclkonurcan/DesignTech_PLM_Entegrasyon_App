
<!-- İşlem devam ederken overlay ekranı -->
<div id="loadingOverlay" style="display:none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 9999; text-align: center; padding-top: 20%;">
    <i class="fas fa-spinner fa-spin" style="font-size: 40px; color: #fff;"></i>
    <p style="color: #fff;">İşlem devam ediyor...</p>
</div>


<div class="warningInfoMessage"></div>

<div class="col-xl-12 mb-5 mb-xl-10" id="excelListArea">
    <div class="col-sm-12 m-2" id="errorList"></div>

    <div class="card card-flush h-xl-100">
        <div class="card-header pt-7 d-flex justify-content-between">
            <div>
                <h5>Alt başlık</h5>
            </div>

            <div class="d-flex align-items-center">
                <!--begin::Checkbox-->
                <label class="form-check form-check-custom form-check-solid me-10">
                    <input class="form-check-input h-20px w-20px" type="radio" name="importType" value="EPM" checked="checked">

                    <span class="form-check-label fw-semibold">
                        EPM
                    </span>
                </label>
                <!--end::Checkbox-->
                <!--begin::Checkbox-->
                <label class="form-check form-check-custom form-check-solid me-7">
                    <input class="form-check-input h-20px w-20px" type="radio" name="importType" value="WTPart">

                    <span class="form-check-label fw-semibold">
                        WTPart
                    </span>
                </label>
                <!--end::Checkbox-->
            
            <button onclick="ExcelAktar();" disabled  id="excel_aktar_btn" class="btn btn-sm btn-success btn-sm ml-auto float-end">PLM IMPORT</button>
            </div>


        </div>

        <div class="card-body  pt-2">
            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                <table class="table align-middle table-row-dashed fs-6 gy-3 dataTable no-footer" id="excel_table">
                    @using (Html.BeginForm("excelproc", "PlmExcelIntegrate", FormMethod.Post, new { id = "excelheadform" }))
                    {
                        <input type="hidden" value="@ViewBag.excelfile" name="excel" id="excelFileName" />
                        <thead>
                            <tr>
                                @try
                                {
                                    @foreach (var item in ViewBag.exceldata.Columns)
                                    {
                                            <td>
                                                <select name="selected_headers[]" colHeadName="@item"  id="headselect_@item" class="form-select multiple_attr m-2">
                                                    <option value="0">None</option>
                                                    @foreach (var AttrItem in ViewBag.AttrList)
                                                    {
                                    
                                                        <option typeAttr="@AttrItem.classnameA2A2"  value="@item|@AttrItem.hierarchyID|@AttrItem.classnameA2A2|@AttrItem.idA2A2">@AttrItem.displayName</option>
                                                    }
                                                </select>
                                            </td>
                                    }
                                }
                                catch (Exception)
                                {
                                    <td>
                                        <select>
                                            <option value="0">None</option>
                                        </select>
                                    </td>
                                }
                            </tr>
                        </thead>
                    }
                    <thead>
                        <tr>
                            @try
                            {
                                @foreach (var item in ViewBag.exceldata.Columns)
                                {
                                    <th id="err_@item">@item</th>
                                }
                            }
                            catch (Exception)
                            {
                                <th class="alert alert-danger m-3 p-2">HATA!</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @try
                        {
                            @foreach (var item in ViewBag.exceldata.Rows)
                            {
                                <tr>
                                    @foreach (var header in ViewBag.exceldata.Columns)
                                    {
                                        <td class="@header">
                                            @{
                                                if (string.IsNullOrEmpty(Convert.ToString(item[header])))
                                                {
                                                }
                                                else
                                                {
                                                                                                                                                @item[header]
                                                }
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        }
                        catch (Exception)
                        {
                            <tr>
                                <td class="alert alert-danger">HATA!</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="col-xl-12 mb-5 mb-xl-10 d-none" id="excelDetailArea">
    <div class="col-sm-12 m-2" id="errorList"></div>

    <div class="card card-flush h-xl-100 " >
        <div class="card-header pt-7 d-flex justify-content-between">
            <div>
                <h5>Hata Yönetimi</h5>
            </div>
        </div>

        <div class="card-body pt-2">
            <div class="table-responsive" id="excelDetailContent">
           
            </div>
        </div>
    </div>
</div>

<style>
    #excel_table_wrapper > .dt-buttons {
        display: none;
    }

    #excel_table_filter {
        float: left;
    }
</style>

<script>
    $('#headselect_Number').attr('disabled', true);
    $('#headselect_CIFTYON').attr('disabled', true);
    $('#headselect_ALTERNATIF').attr('disabled', true);
    $('#headselect_ESKI_NAME').attr('disabled', true);

    // $('#headselect_Number').addClass("d-none");
    // $('#headselect_ESKI_NAME').addClass("d-none");

</script>


<script>




    // $(document).ready(function () {
    //     $('#excel_table').DataTable({
    //         "pageLength": 5,
    //         "info": false,
    //         "ordering": false,
    //         "dom": 'Bfrtip',
    //         "language": {
    //             "url": "//cdn.datatables.net/plug-ins/1.11.6/i18n/Turkish.json",
    //             "search": "",
    //             "searchPlaceholder": "Search...",
    //             "sInfo": "Toplam _TOTAL_ kayıt arasından _START_ - _END_ arasındaki kayıtlar gösteriliyor",
    //             "sInfoFiltered": "(toplam _MAX_ kayıttan süzülmüş)",
    //         }
    //     });



 
    // });
</script>
<script>
    // Bu değişken, hataları tutmak için bir dizi oluşturur.
    var hataListesi = [];

    function ExcelAktar() {
        dedebugger;
        // Overlay ekranını göster
        $('#loadingOverlay').show();

        // Hataları temizle
        hataListesi = [];

        let formData = $('#excelheadform').serialize();
        ajaxClass('/upload/excelproc', formData,
            function (data) {
                // İşlem tamamlandığında overlay ekranını gizle
                $('#loadingOverlay').hide();

                if (data.status == true) {
                    toastr.success(data.message);
                    $('.multiple_attr').val('0'); // Tüm seçim alanlarını "None" olarak ayarla

                    // Hata listesini kontrol et
                    if (hataListesi.length > 0) {
                        // Hata listesini post et veya işlem yap
                        postHataListesi(hataListesi);
                    } else {
                        // Hata yoksa verileri başka bir yere post et
                        postVerileri(data);
                    }
                } else {
                    toastr.error(data.message);
                }
            },
            function (err) {
                // İşlem tamamlandığında overlay ekranını gizle
                $('#loadingOverlay').hide();

                toastr.error('Tip Dönüşüm Hatası');
            }, null);
    }

    function postHataListesi(hatalar) {
        // Hataları başka bir controller'a post et veya işlem yap
        $.ajax({
            url: '/upload/posthatalistesi',
            type: 'POST',
            data: {
                hatalar: hatalar
            },
            success: function (data) {
                if (data.status == true) {
                    toastr.success('Hatalar başka bir yere gönderildi.');
                } else {
                    toastr.error('Hatalar gönderilirken bir hata oluştu.');
                }
            },
            error: function () {
                toastr.error('Hatalar gönderilirken bir hata oluştu.');
            }
        });
    }

    function postVerileri(veriler) {
        // Verileri başka bir controller'a post et veya işlem yap
        $.ajax({
            url: '/upload/postveriler',
            type: 'POST',
            data: {
                veriler: veriler
            },
            success: function (data) {
                if (data.status == true) {
                    toastr.success('Veriler başka bir yere gönderildi.');
                } else {
                    toastr.error('Veriler gönderilirken bir hata oluştu.');
                }
            },
            error: function () {
                toastr.error('Veriler gönderilirken bir hata oluştu.');
            }
        });
    }

    var errorList = [];
    var emptyList = [];
    var validList = [];
    var colHeadNameList = [];



    function isNumeric(str) {
        if (typeof str != "string") return false // we only process strings!
        return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
            !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
    }
    function clearErrors() {
        errorList = [];
        emptyList = [];
        validList = [];
        $('td.has-error').removeClass('has-error');
    }


    console.warn("HATALI" + errorList);
    console.warn("BOŞ" + emptyList);

    $('.multiple_attr').change(function () {
        clearErrors();
        let allNone = true;
  

        let colNames = []; // Başlık isimlerini saklamak için dizi


        // Başlık isimlerini topla
        $('#excel_table thead tr:first-child th').each(function () {
            colNames.push($(this).text().trim());
        });




        $('.multiple_attr').each(function () {
            let colHeadName = $(this).attr("colHeadName");
            colHeadNameList.push(colHeadName);
            let colHeadType = $(this).val().split("|")[2];
            let hasError = false;
            let hasEmpty = false;


             
            // Başlık isminin indeksini bul
            let columnIndex = colNames.indexOf(colHeadName) + 1;

            // if (colHeadType === "wt.iba.definition.FloatDefinition" ||
            //     colHeadType === "wt.iba.definition.DoubleDefinition" ||
            //     colHeadType === "wt.iba.definition.DecimalDefinition" ||
            //     colHeadType === "wt.iba.definition.IntDefinition") {
            //     $('td:nth-child(' + columnIndex + '):not(:first-child)').slice(1).each(function (i, obj) {
            //         let cellValue = $(obj).text().trim();
            //         if (!isNumeric(cellValue) || cellValue === "") {
            //             hasError = true;
            //             let rowIndex = $(this).closest('tr').index() + 1;
            //             let fileName = $('#excelFileName').val();
            //             let errorInfo = {
            //                 ExcelDosya: fileName,
            //                 className: colHeadName,
            //                 Hata: cellValue,
            //                 Satir: rowIndex,
            //                 Sutun: columnIndex,
            //                 Durum: true
            //             };
            //             let errorInfoJSON = JSON.stringify(errorInfo);
            //             errorList.push(errorInfoJSON);
            //             // $(this).css("color", "red");
            //         } else {
            //             validList.push(cellValue);
            //             $(this).css("color", "black");
            //         }
            //         if (cellValue == "") {
            //             hasEmpty = true;
            //             let rowIndex = $(this).closest('tr').index() + 1;
            //             let fileName = $('#excelFileName').val();
            //             let emptyInfo = {
            //                 ExcelDosya: fileName,
            //                 className: colHeadName,
            //                 Hata: cellValue,
            //                 Satir: rowIndex,
            //                 Sutun: columnIndex,
            //                 Durum: true
            //             };
            //             let emptyInfoJSON = JSON.stringify(emptyInfo);
            //             emptyList.push(emptyInfoJSON);
            //         }
            //     });
            // } else if (colHeadType === "wt.iba.definition.BooleanDefinition")
            // {
            //     $('td:nth-child(' + columnIndex + '):not(:first-child)').slice(1).each(function (i, obj) {
            //         let cellValue = $(obj).text().trim();
            //         if ((cellValue !== "True" && cellValue !== "False") || (cellValue !== "Yes" && cellValue !== "No") || cellValue === "") {
            //             hasError = true;
            //             let rowIndex = $(this).closest('tr').index() + 1;
            //             let fileName = $('#excelFileName').val();
            //             let errorInfo = {
            //                 ExcelDosya: fileName,
            //                 className: colHeadName,
            //                 Hata: cellValue,
            //                 Satir: rowIndex,
            //                 Sutun: columnIndex,
            //                 Durum: true
            //             };
            //             let errorInfoJSON = JSON.stringify(errorInfo);

            //             errorList.push(errorInfoJSON);
            //             $(this).css("color", "red");
            //         } else {
            //             validList.push(cellValue);
            //             $(this).css("color", "black");
            //         }
            //         if (cellValue == "") {
            //             hasEmpty = true;
            //             let rowIndex = $(this).closest('tr').index() + 1;
            //             let fileName = $('#excelFileName').val();
            //             let emptyInfo = {
            //                 ExcelDosya: fileName,
            //                 className: colHeadName,
            //                 Hata: cellValue,
            //                 Satir: rowIndex,
            //                 Sutun: columnIndex,
            //                 Durum: true
            //             };
            //             let emptyInfoJSON = JSON.stringify(emptyInfo);
            //             emptyList.push(emptyInfoJSON);
            //         }
            //     });
            // } else 
            
            if (colHeadType === "wt.iba.definition.TimestampDefinition") 
            {

                // Sütunundaki tüm hücreleri döngüye al
                $('td:nth-child(' + columnIndex + ')').slice(1).each(function (i, obj) {

                    // Hücre değerini al
                    let cellValue = $(this).text().trim();

                    // Zaman damgası için regex tanımla
                    let timestampRegex = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/;

                    if (cellValue == "") {
                                    hasEmpty = true;
                                    let rowIndex = $(this).closest('tr').index() + 1;
                                    let fileName = $('#excelFileName').val();
                                    let emptyInfo = {
                                        ExcelDosya: fileName,
                                        className: colHeadName,
                                        Hata: cellValue,
                                        Satir: rowIndex,
                                        Sutun: columnIndex,
                                        Durum: true
                                    };
                                    let emptyInfoJSON = JSON.stringify(emptyInfo);
                                    emptyList.push(emptyInfoJSON);
                                }
                    // Hücre değerini kontrol et
                    if (!timestampRegex.test(cellValue)) {

                        // Geçersiz ise hata ayarla
                        hasError = true;

                        // Hata bilgisini oluştur
                        let errorInfo = {
                            ExcelDosya: $('#excelFileName').val(),
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: $(this).closest('tr').index() + 1,
                            Sutun: columnIndex,
                            Durum: true
                        };

                        // Hata listesine ekle
                        let errorInfoJSON = JSON.stringify(errorInfo);
                        errorList.push(errorInfoJSON);

                        // Hücre rengini kırmızı yap
                        // $(this).css("color", "red");

                    } else {

                        // Geçerliyse geçerli listesine ekle
                        validList.push(cellValue);

                        // Hücre rengini siyah yap
                        $(this).css("color", "black");

                    }

                });

            } else if (colHeadType === "wt.iba.definition.FloatDefinition") 
            {

                // Sütunundaki tüm hücreleri döngüye al
                $('td:nth-child(' + columnIndex + ')').slice(1).each(function (i, obj) {

                    // Hücre değerini al
                    let cellValue = $(this).text().trim();

                    // Zaman damgası için regex tanımla
                    // let floatRegex = /^-?\d+\.\d+$/;
                    let floatRegex = /^-?\d+(\.\d+)?([eE]\d+)?$/;
                    if (cellValue == "") {
                        hasEmpty = true;
                        let rowIndex = $(this).closest('tr').index() + 1;
                        let fileName = $('#excelFileName').val();
                        let emptyInfo = {
                            ExcelDosya: fileName,
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: rowIndex,
                            Sutun: columnIndex,
                            Durum: true
                        };
                        let emptyInfoJSON = JSON.stringify(emptyInfo);
                        emptyList.push(emptyInfoJSON);
                    }
                    // Hücre değerini kontrol et
                    if (!floatRegex.test(cellValue)) {

                        // Geçersiz ise hata ayarla
                        hasError = true;

                        // Hata bilgisini oluştur
                        let errorInfo = {
                            ExcelDosya: $('#excelFileName').val(),
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: $(this).closest('tr').index() + 1,
                            Sutun: columnIndex,
                            Durum: true
                        };

                        // Hata listesine ekle
                        let errorInfoJSON = JSON.stringify(errorInfo);
                        errorList.push(errorInfoJSON);

                        // Hücre rengini kırmızı yap
                        $(this).css("color", "red");

                    } else {

                        // Geçerliyse geçerli listesine ekle
                        validList.push(cellValue);

                        // Hücre rengini siyah yap
                        $(this).css("color", "black");

                    }

                });

            } else if (colHeadType === "wt.iba.definition.IntDefinition") {

                // Sütunundaki tüm hücreleri döngüye al
                $('td:nth-child(' + columnIndex + ')').slice(1).each(function (i, obj) {

                    // Hücre değerini al
                    let cellValue = $(this).text().trim();

                    // Zaman damgası için regex tanımla
                    let intRegex = /^-?\d+$/;
                    if (cellValue == "") {
                        hasEmpty = true;
                        let rowIndex = $(this).closest('tr').index() + 1;
                        let fileName = $('#excelFileName').val();
                        let emptyInfo = {
                            ExcelDosya: fileName,
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: rowIndex,
                            Sutun: columnIndex,
                            Durum: true
                        };
                        let emptyInfoJSON = JSON.stringify(emptyInfo);
                        emptyList.push(emptyInfoJSON);
                    }
                    // Hücre değerini kontrol et
                    if (!intRegex.test(cellValue)) {

                        // Geçersiz ise hata ayarla
                        hasError = true;

                        // Hata bilgisini oluştur
                        let errorInfo = {
                            ExcelDosya: $('#excelFileName').val(),
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: $(this).closest('tr').index() + 1,
                            Sutun: columnIndex,
                            Durum: true
                        };

                        // Hata listesine ekle
                        let errorInfoJSON = JSON.stringify(errorInfo);
                        errorList.push(errorInfoJSON);

                        // Hücre rengini kırmızı yap
                        // $(this).css("color", "red");

                    } else {

                        // Geçerliyse geçerli listesine ekle
                        validList.push(cellValue);

                        // Hücre rengini siyah yap
                        $(this).css("color", "black");

                    }

                });

            } else if (colHeadType === "wt.iba.definition.UnitDefinition")
            {

                // Sütunundaki tüm hücreleri döngüye al
                $('td:nth-child(' + columnIndex + ')').slice(1).each(function (i, obj) {

                    // Hücre değerini al
                    let cellValue = $(this).text().trim();

                    // Zaman damgası için regex tanımla
                    let unitRegex = /^-?\d+(\.\d+)?\s*(mi|km|m|cm|mm|in|ft|yd|g|kg|mg|oz|lb|gal|l|ml)$/;
                    if (cellValue == "") {
                        hasEmpty = true;
                        let rowIndex = $(this).closest('tr').index() + 1;
                        let fileName = $('#excelFileName').val();
                        let emptyInfo = {
                            ExcelDosya: fileName,
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: rowIndex,
                            Sutun: columnIndex,
                            Durum: true
                        };
                        let emptyInfoJSON = JSON.stringify(emptyInfo);
                        emptyList.push(emptyInfoJSON);
                    }
                    // Hücre değerini kontrol et
                    if (!unitRegex.test(cellValue)) {

                        // Geçersiz ise hata ayarla
                        hasError = true;

                        // Hata bilgisini oluştur
                        let errorInfo = {
                            ExcelDosya: $('#excelFileName').val(),
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: $(this).closest('tr').index() + 1,
                            Sutun: columnIndex,
                            Durum: true
                        };

                        // Hata listesine ekle
                        let errorInfoJSON = JSON.stringify(errorInfo);
                        errorList.push(errorInfoJSON);

                        // Hücre rengini kırmızı yap
                        // $(this).css("color", "red");

                    } else {

                        // Geçerliyse geçerli listesine ekle
                        validList.push(cellValue);

                        // Hücre rengini siyah yap
                        $(this).css("color", "black");

                    }

                });

            } else if (colHeadType === "wt.iba.definition.DecimalDefinition") 
                {

                // Sütunundaki tüm hücreleri döngüye al
                $('td:nth-child(' + columnIndex + ')').slice(1).each(function (i, obj) {

                    // Hücre değerini al
                    let cellValue = $(this).text().trim();

                    // Zaman damgası için regex tanımla
                    let decimalRegex = /^-?\d+\.\d+$/;
                    if (cellValue == "") {
                        hasEmpty = true;
                        let rowIndex = $(this).closest('tr').index() + 1;
                        let fileName = $('#excelFileName').val();
                        let emptyInfo = {
                            ExcelDosya: fileName,
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: rowIndex,
                            Sutun: columnIndex,
                            Durum: true
                        };
                        let emptyInfoJSON = JSON.stringify(emptyInfo);
                        emptyList.push(emptyInfoJSON);
                    }
                    // Hücre değerini kontrol et
                    if (!decimalRegex.test(cellValue)) {

                        // Geçersiz ise hata ayarla
                        hasError = true;

                        // Hata bilgisini oluştur
                        let errorInfo = {
                            ExcelDosya: $('#excelFileName').val(),
                            className: colHeadName,
                            Hata: cellValue,
                            Satir: $(this).closest('tr').index() + 1,
                            Sutun: columnIndex,
                            Durum: true
                        };

                        // Hata listesine ekle
                        let errorInfoJSON = JSON.stringify(errorInfo);
                        errorList.push(errorInfoJSON);

                        // Hücre rengini kırmızı yap
                        // $(this).css("color", "red");

                    } else {

                        // Geçerliyse geçerli listesine ekle
                        validList.push(cellValue);

                        // Hücre rengini siyah yap
                        $(this).css("color", "black");

                    }

                });

            } 
            // else if (colHeadType === "wt.iba.definition.StringDefinition") {

            //     // Sütunundaki tüm hücreleri döngüye al
            //     $('td:nth-child(' + columnIndex + ')').slice(1).each(function (i, obj) {

            //         // Hücre değerini al
            //         let cellValue = $(this).text().trim();

            //         // Zaman damgası için regex tanımla
            //         let stringRegex = /^.+$/;
            //         if (cellValue == "") {
            //             hasEmpty = true;
            //             let rowIndex = $(this).closest('tr').index() + 1;
            //             let fileName = $('#excelFileName').val();
            //             let emptyInfo = {
            //                 ExcelDosya: fileName,
            //                 className: colHeadName,
            //                 Hata: cellValue,
            //                 Satir: rowIndex,
            //                 Sutun: columnIndex,
            //                 Durum: true
            //             };
            //             let emptyInfoJSON = JSON.stringify(emptyInfo);
            //             emptyList.push(emptyInfoJSON);
            //         }
            //         // Hücre değerini kontrol et
            //         if (!stringRegex.test(cellValue)) {

            //             // Geçersiz ise hata ayarla
            //             hasError = true;

            //             // Hata bilgisini oluştur
            //             let errorInfo = {
            //                 ExcelDosya: $('#excelFileName').val(),
            //                 className: colHeadName,
            //                 Hata: cellValue,
            //                 Satir: $(this).closest('tr').index() + 1,
            //                 Sutun: columnIndex,
            //                 Durum: true
            //             };

            //             // Hata listesine ekle
            //             let errorInfoJSON = JSON.stringify(errorInfo);
            //             errorList.push(errorInfoJSON);

            //             // Hücre rengini kırmızı yap
            //             $(this).css("color", "red");

            //         } else {

            //             // Geçerliyse geçerli listesine ekle
            //             validList.push(cellValue);

            //             // Hücre rengini siyah yap
            //             $(this).css("color", "black");

            //         }

            //     });

            // }


            // Diğer doğrulama işlemleri...

            // Tüm seçim alanlarını kontrol et
            $('.multiple_attr').each(function () {
                if ($(this).val() !== "0") {
                    allNone = false;
                }
            });

            // Hata varsa veya hiçbir şey seçilmediyse PLM IMPORT butonunu etkinleştir
            if (allNone) {
                $('#excel_aktar_btn').attr("disabled", true);
            } else {
                $('#excel_aktar_btn').attr("disabled", false);
            }
        });

        // Hata Listesini konsola yazdırma işlemi burada değil, errorList ve validList dolduktan sonra yapılmalıdır.
        console.log("Hatalı Değerler ve Konumları:");
        errorList.forEach(function (error) {
            console.log(error);
        });


        console.log("Doğru Değerler: " + validList);
        console.log("Boş Değerler: " + emptyList);
    });

    // Her bir 'select' öğesini döngüye alın
    $('select.multiple_attr').each(function () {
        let colHeadName = $(this).attr("colHeadName");

        // Eğer colHeadName, selectedHeaders dizisinde ise, seçili değeri olarak ayarla
        // Aksi takdirde, "None" olarak ayarla
        if (colHeadNameList.includes(colHeadName)) {
            $(this).val(colHeadName);
        } else {
            $(this).val("0"); // "None" için değeri 0 olarak varsayalım
        }
    });

    // $('.multiple_attr').change(function () {
    //     // Hata kontrolü için bir değişken
    //     let allNone = true;
    //     errorList = []; // Her seçim değişikliğinde errorList dizisini temizle
    //     emptyList = []; // Her seçim değişikliğinde emptyList dizisini temizle
    //     validList = []; // Her seçim değişikliğinde validList dizisini temizle

    //     $('.multiple_attr').each(function () {

    //         let colHeadName = $(this).attr("colHeadName");
    //         let colHeadType = $(this).val().split("|")[2];
    //         let hasError = false;
    //         let hasEmpty = false;


        
    //         console.warn("COL INDEX " + columnIndex);


    //         if (colHeadType === "wt.iba.definition.FloatDefinition" ||
    //             colHeadType === "wt.iba.definition.DoubleDefinition" ||
    //             colHeadType === "wt.iba.definition.DecimalDefinition" ||
    //             colHeadType === "wt.iba.definition.IntDefinition") {
    //             $('.' + colHeadName).each(function (i, obj) {
    //                 let cellValue = $(obj).text().trim();
    //                 console.warn(cellValue);

    //                 // if (!isNumeric(cellValue) && cellValue !== "") {
    //                 if (!isNumeric(cellValue) || cellValue === "") {
    //                     hasError = true;

    //                     // Hatalı değeri ve konumunu errorList'e ekleyin
    //                     let rowIndex = $(this).closest('tr').index() + 1; // Satır numarası (1 başlangıçlı)
    //                     let columnIndex = $(this).index() + 1; // Sütun numarası (1 başlangıçlı)
    //                     // let errorInfo = `Hata: ${cellValue}, Satır: ${rowIndex}, Sütun: ${columnIndex},Durum: ${true}`;
    //                     // errorList.push(errorInfo);
    //                     var fileName = $('#excelFileName').val();
    //                     let errorInfo = {
    //                         ExcelDosya: fileName,
    //                         className: colHeadName,
    //                         Hata: cellValue,
    //                         Satir: rowIndex,
    //                         Sutun: columnIndex,
    //                         Durum: true
    //                     };

    //                     let errorInfoJSON = JSON.stringify(errorInfo);
    //                     errorList.push(errorInfoJSON);

    //                     $(this).css("color", "red");
    //                 } else {
    //                     validList.push(cellValue); // Hatalı olmayan değeri validList'e ekleyin
    //                     $(this).css("color", "black");
    //                 }
    //                 if (cellValue == "") {

    //                     hasEmpty = true;

    //                     let rowIndex = $(this).closest('tr').index() + 1;
    //                     let columnIndex = $(this).index() + 1;

    //                     var fileName = $('#excelFileName').val();
    //                     let emptyInfo = {
    //                         ExcelDosya: fileName,
    //                         className: colHeadName,
    //                         Hata: cellValue,
    //                         Satir: rowIndex,
    //                         Sutun: columnIndex,
    //                         Durum: true
    //                     };

    //                     let emptyInfoJSON = JSON.stringify(emptyInfo);
    //                     emptyList.push(emptyInfoJSON);
    //                 }




    //             });
    //         } else if (colHeadType === "wt.iba.definition.BooleanDefinition") {
    //             $('.' + colHeadName).each(function (i, obj) {

    //                 // $(this).closest('tr').find('.' + colHeadName).each(function (i, obj) {
    //                 let cellValue = $(obj).text().trim();

    //                 // if (!isNumeric(cellValue) && cellValue !== "") {
    //                 if ((cellValue !== "True" && cellValue !== "False") || (cellValue !== "Yes" && cellValue !== "No") || cellValue === "") {
    //                     hasError = true;

    //                     // Hatalı değeri ve konumunu errorList'e ekleyin
    //                     let rowIndex = $(this).closest('tr').index() + 1; // Satır numarası (1 başlangıçlı)
    //                     let columnIndex = $(this).index() + 1; // Sütun numarası (1 başlangıçlı)
    //                     // let errorInfo = `Hata: ${cellValue}, Satır: ${rowIndex}, Sütun: ${columnIndex},Durum: ${true}`;
    //                     // errorList.push(errorInfo);
    //                     var fileName = $('#excelFileName').val();
    //                     let errorInfo = {
    //                         ExcelDosya: fileName,
    //                         className: colHeadName,
    //                         Hata: cellValue,
    //                         Satir: rowIndex,
    //                         Sutun: columnIndex,
    //                         Durum: true
    //                     };

    //                     let errorInfoJSON = JSON.stringify(errorInfo);
    //                     // console.warn("Hatalar : "+errorInfoJSON);
    //                     errorList.push(errorInfoJSON);


    //                     $(this).css("color", "red");
    //                 } else {
    //                     validList.push(cellValue); // Hatalı olmayan değeri validList'e ekleyin
    //                     $(this).css("color", "black");
    //                 }
    //                 if (cellValue == "") {

    //                     hasEmpty = true;

    //                     let rowIndex = $(this).closest('tr').index() + 1;
    //                     let columnIndex = $(this).index() + 1;

    //                     var fileName = $('#excelFileName').val();
    //                     let emptyInfo = {
    //                         ExcelDosya: fileName,
    //                         className: colHeadName,
    //                         Hata: cellValue,
    //                         Satir: rowIndex,
    //                         Sutun: columnIndex,
    //                         Durum: true
    //                     };

    //                     let emptyInfoJSON = JSON.stringify(emptyInfo);
    //                     emptyList.push(emptyInfoJSON);
    //                 }




    //             });

    //         }

    //         // Diğer hata türlerine benzer şekilde hatalı veya doğru değerleri ilgili dizilere ekleyebilirsiniz.


    //         // Tüm seçim alanlarını kontrol edin
    //         $('.multiple_attr').each(function () {
    //             if ($(this).val() !== "0") {
    //                 allNone = false;
    //             }
    //         });

    //         // Hata varsa veya hiçbir şey seçilmediyse PLM IMPORT butonunu etkinleştirin
    //         // if (allNone || $('.multiple_attr[hasError="true"]').length > 0) {
    //         if (allNone) {
    //             $('#excel_aktar_btn').attr("disabled", true);
    //         } else {
    //             $('#excel_aktar_btn').attr("disabled", false);
    //         }


    //     });

    //     // Hata Listesini konsola yazdırma işlemi burada değil, errorList ve validList dolduktan sonra yapılmalıdır.
    //     console.log("Hatalı Değerler ve Konumları:");
    //     errorList.forEach(function (error) {
    //         console.log(error);
    //     });
    //     console.log("Doğru Değerler: " + validList);
    //     console.log("Boş Değerler: " + emptyList);
    // });



    function ExcelAktar() {
        if (emptyList.length > 0) {

            Swal.fire({
                title: "Hatalı Değerler Var!",
                html: `Seçilen sütun da boş alan bulunuyor. Devam etmek istiyor musunuz?
                           <br>Boş alan Sayısı: ${emptyList.length}`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Evet, Devam Et",
                cancelButtonText: "Hayır, İptal Et",
                customClass: {
                    confirmButton: "btn btn-primary",
                    cancelButton: "btn btn-danger"
                }
            }).then((result) => {

                if (result.isConfirmed) {
                    continueWithPost();

                }
            });
        } else {
            continueWithPost();
            // Swal.fire({
            //     title: "Hata Yok",
            //     text: "Excel dosyasında hatalı alanlar bulunmuyor. İşlemi devam ettirmek istiyor musunuz?",
            //     icon: "info",
            //     showCancelButton: true,
            //     confirmButtonText: "Evet, Devam Et",
            //     cancelButtonText: "Hayır, İptal Et",
            //     customClass: {
            //         confirmButton: "btn btn-primary",
            //         cancelButton: "btn btn-danger"
            //     }
            // }).then((result) => {
            //     if (result.isConfirmed) {
            //         continueWithPost();
            //     }
            // });
        }
    }
    function continueWithPost() {
        var errorListJSON = JSON.stringify(errorList);
        var validListJSON = JSON.stringify(validList);
        var fileName = $('#excelFileName').val();
        let formData = $('#excelheadform').serialize();
        var sutunList = [];

       var selectedValue = $('input[name="importType"]:checked').val();
     
       



        console.warn("Error List Json Data : "+errorListJSON);


        $.ajax({
            url: '/PlmExcelIntegrate/ExcelFileControl',
            type: 'POST',
            data: { data: formData, HataListesi: errorListJSON, Hatasizlar: validListJSON, excelFile: fileName, importType: selectedValue, colHeadNameList: colHeadNameList },
            dataType: "json",
            success: function (data) {
                if (errorList.length > 0) {

                    $('#excelDetailArea').removeClass("d-none");
                    $('#excelListArea').addClass("d-none");
                    var searchParams = new URLSearchParams(window.location.search);
                    var fileParam = searchParams.get("file");

                    let basliklar = data.basliklar;
                    let hataNo = data.hataNo;
                    var veriler = data.veriler;

                    const uniqueValuesSet = new Set();

                    veriler.forEach(data => {
                        uniqueValuesSet.add(data.item5);
                    });
                    const uniqueValuesArray = Array.from(uniqueValuesSet);
                    console.log(uniqueValuesArray);
                    sutunList.push(...uniqueValuesArray);



                    console.warn("SUTUN LİSTESİ"+sutunList);


                    var fileNameWithoutDate = fileName.replace(/_\d{4}-\d{2}-\d{2}-\d{2}-\d{2}/, '');

                    // Eğer emptyList değişkeni 0'dan büyükse
                    var errorMessage = emptyList.length > 0 ? `Tip uyuşmazlığı ve boş alan hatası!` : `Tip uyuşmazlığı hatası!`;

                    // Kullanıcıya bildirimi göster


                    let table = `

                        <div class="alert alert-dismissible bg-light-info border border-info border-3 border-dashed d-flex flex-column flex-sm-row w-100 p-5 mb-10">
                        <!--begin::Icon-->
                        <i class="ki-duotone ki-notification-bing fs-2hx text-info me-4 mb-5 mb-sm-0"><span class="path1"></span><span class="path2"></span><span class="path3"></span></i>                    <!--end::Icon-->

                        <!--begin::Content-->
                        <div class="d-flex flex-column pe-0 pe-sm-10">
                                <h5 class="mb-1">${errorMessage}</h5>
                                        <span>Bu <strong>${fileNameWithoutDate} </strong> excel dosyasın da ${errorMessage} var lütfen şeçimlerinizi kontrol edip dosyayı tekrar yükleyin.</span>
                        </div>
                        <!--end::Content-->

                        <!--begin::Close-->
                        <button type="button" class="position-absolute position-sm-relative m-2 m-sm-0 top-0 end-0 btn btn-icon ms-sm-auto" data-bs-dismiss="alert">
                            <i class="ki-duotone ki-cross fs-1 text-info"><span class="path1"></span><span class="path2"></span></i>                    </button>
                        <!--end::Close-->
                        </div>

                        <div class="table-responsive">
                        <table class="table" id="excel_error_table">
                        
                    `;

                    const firstMatch = veriler.filter(satir => satir.item1 == fileParam)[0].item4

                    // console.warn(firstMatch);
                    table += `<thead>
      <tr>
        <th>#</th>
            ${firstMatch.map(b => `<th>${b}</th>`).join('')}
      </tr>
    </thead>`;
                    let displayedItem1 = new Set(); // Daha önce gösterilen item1 değerlerini izlemek için bir Set

                    let satirHtml = `<tbody>`;
                    veriler.forEach((satir, index) => {




                        if (satir.item1 == fileParam) {


                       
                            


                         satirHtml = `<tr id="hucreID_${satir.item2 + 1}">`;

                        if (!displayedItem1.has(satir.item2 + 1)) {
                            satirHtml += `<td><span class="badge py-3 px-4 fs-7 badge-light-primary">${satir.item2 + 1}</span></td>`;
                            displayedItem1.add(satir.item2 + 1);
                        } else {
                            satirHtml += `<td><span class="badge py-3 px-4 fs-7 badge-light-primary" style="visibility: hidden;">${satir.item2 + 1}</span></td>`;
                        }

                        satir.item3.forEach((hucre,index) => {
                            if (hucre === "") {
                                    hucre = "<span class='badge py-3 px-4 fs-7 badge-light-warning'>N/A</span>";
                            }
                                if (hataNo.includes(hucre) && sutunList.includes(index+1)) {
                                satirHtml += `<td><span class="badge py-3 px-4 fs-7 badge-light-danger">${hucre}</span></td>`;
                            } else {
                                satirHtml += `<td>${hucre}</td>`;
                            }
                        });


                            // console.warn("HATA !!!"+satir.item5);

                        satirHtml += `</tr>`;
                        table += satirHtml;
                        }
                    });

                    table += `</tbody></table></div>`;
                    $('#excelDetailContent').html(table);

          


                    $('[id^="hucreID_"]').each(function () {
                        const $trList = $(`tr[id="${this.id}"]`);
                        if ($trList.length > 1) {
                            $trList.not(':first').remove();
                        }
                    });
                    // DataTable uygula
                    $('#excel_error_table').DataTable({
                        "pageLength": 5,
                        "info": false,
                        "ordering": false,
                        "dom": 'Bfrtip',
                        "language": {
                            "url": "//cdn.datatables.net/plug-ins/1.11.6/i18n/Turkish.json",
                            "search": "",
                            "searchPlaceholder": "Search...",
                            "sInfo": "Toplam _TOTAL_ kayıt arasından _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                            "sInfoFiltered": "(toplam _MAX_ kayıttan süzülmüş)",
                        }
                    });

                    toastr.info("Post işlemi gerçekleştirildi, ancak excel dosyasında hatalı alanlar bulunuyor. Log sayfasını kontrol ediniz.");
                } else {
                    toastr.success("Post işlemi başarılı");
                }
            },
            error: function (error) {
                toastr.error("Post işlemi sırasında hata oluştu: " + error);
            }
        });
    }


    // function ExcelAktar() {
    //     // alert("kekw")
    //     // errorList ve validList dizilerini JSON formatına çevirin
    //     var errorListJSON = JSON.stringify(errorList);
    //     var validListJSON = JSON.stringify(validList);
    //     var fileName = $('#excelFileName').val();
    //     let formData = $('#excelheadform').serialize();
    //     // Post işlemi için bir AJAX isteği gönderin
    //     $.ajax({
    //         url: '/PlmExcelIntegrate/ExcelFileControl',
    //         type: 'POST',
    //         data: { data:formData, HataListesi: errorListJSON, Hatasizlar: validListJSON },
    //         dataType: "json",
    //         success: function (data) {
    //             // Başarılı bir şekilde post işlemi tamamlandığında burada işlemlerinizi yapabilirsiniz
    //             if (hataListesi.length > 0) {
    //                 toastr.info("Post işlemi gerçekleştirildi ama excel dosyasında hatalı alanlar var log sayfasını kontrol ediniz.");
    //             } else {
    //                 toastr.success("Post işlemi başarılı");
    //             }
    //         },
    //         error: function (error) {
    //             // Post işlemi sırasında hata oluştuğunda burada işlemlerinizi yapabilirsiniz
    //             toastr.error("Post işlemi sırasında hata oluştu: " + error);
    //         }
    //     });
    // }


    //         var errorList = [];

    // $('.multiple_attr').change(function () {
    //     // Hata kontrolü için bir değişken
    //     let allNone = true;
    //     $('.multiple_attr').each(function () {
    //         let colHeadName = $(this).attr("colHeadName");
    //         let hasError = false;
    //         let colHeadType = $(this).val().split("|")[2];

    //         if (colHeadType === "wt.iba.definition.FloatDefinition") { 
    //             $('.' + colHeadName).each(function (i, obj) {
    //                 let cellValue = $(obj).text().trim();

    //                 if (!isNumeric(cellValue) && cellValue !== "") {
    //                     hasNumericError = true;
    //                     hasError = true;
    //                     errorList.push(cellValue);
    //                     $(this).css("color", "red");
    //                 } else {
    //                     $(this).css("color", "black");
    //                 }
    //             });
    //         }
           

    //         // if (colHeadType === "wt.iba.definition.FloatDefinition" ||
    //         //     colHeadType === "wt.iba.definition.DoubleDefinition" ||
    //         //     colHeadType === "wt.iba.definition.DecimalDefinition" ||
    //         //     colHeadType === "wt.iba.definition.IntDefinition") {
    //         //     let hasNumericError = false;

    //         //     $('.' + colHeadName).each(function (i, obj) {
    //         //         let cellValue = $(obj).text().trim();
    //         //         if (!isNumeric(cellValue) && cellValue !== "") {
    //         //             hasNumericError = true;
    //         //             hasError = true;
    //         //             $(this).css("color", "red");
    //         //         } else {
    //         //             $(this).css("color", "black");
    //         //         }
    //         //     });

    //         //     if (hasNumericError) {
    //         //         $('#err_' + colHeadName).html(colHeadName + ' <span class="badge badge-danger">HATA</span>');
    //         //         hataListesi.push(colHeadName + ' sütununda sayısal olmayan değerler var.');
    //         //     } else {
    //         //         $('#err_' + colHeadName).html(colHeadName);
    //         //     }
    //         // } else if (colHeadType === "wt.iba.definition.TimestampDefinition") {
    //         //     let hasTimestampError = false;

    //         //     $('.' + colHeadName).each(function (i, obj) {
    //         //         let cellValue = $(obj).text().trim();
    //         //         if (cellValue === "") {
    //         //             $(this).html("EMPTY");
    //         //             toastr.error("Datetime Not Empty");
    //         //             hasTimestampError = true;
    //         //             hasError = true;
    //         //         } else {
    //         //             $(this).css("color", "black");
    //         //             if ($(this).html() === "EMPTY") {
    //         //                 $(this).css("color", "orange");
    //         //             }
    //         //         }
    //         //     });

    //         //     if (hasTimestampError) {
    //         //         $('#err_' + colHeadName).html(colHeadName + ' <span class="badge badge-danger">HATA</span>');
    //         //         hataListesi.push(colHeadName + ' sütununda eksik tarih saat bilgisi var.');
    //         //     } else {
    //         //         $('#err_' + colHeadName).html(colHeadName);
    //         //     }
    //         // } else if (colHeadType === "wt.iba.definition.BooleanDefinition") {
    //         //     let hasBooleanError = false;

    //         //     $('.' + colHeadName).each(function (i, obj) {
    //         //         let cellValue = $(obj).text().trim();
    //         //         if (cellValue !== "True" && cellValue !== "False" && cellValue !== "") {
    //         //             hasBooleanError = true;
    //         //             hasError = true;
    //         //             $(this).css("color", "red");
    //         //         } else {
    //         //             $(this).css("color", "black");
    //         //         }
    //         //     });

    //         //     if (hasBooleanError) {
    //         //         $('#err_' + colHeadName).html(colHeadName + ' <span class="badge badge-danger">HATA</span>');
    //         //         hataListesi.push(colHeadName + ' sütununda hatalı boolean değerler var.');
    //         //     } else {
    //         //         $('#err_' + colHeadName).html(colHeadName);
    //         //     }
    //         // } else if (colHeadType === "wt.iba.definition.StringDefinition" || colHeadType === "wt.iba.definition.UnitDefinition") {
    //         //     let hasStringUnitError = false;

    //         //     $('.' + colHeadName).each(function (i, obj) {
    //         //         let cellValue = $(obj).text().trim();
    //         //         if (cellValue === "") {
    //         //             $(this).html("EMPTY");
    //         //         } else {
    //         //             $(this).css("color", "black");
    //         //             if ($(this).html() === "EMPTY") {
    //         //                 $(this).css("color", "orange");
    //         //             }
    //         //         }
    //         //     });

    //         //     if (hasStringUnitError) {
    //         //         $('#err_' + colHeadName).html(colHeadName + ' <span class="badge badge-danger">HATA</span>');
    //         //         hataListesi.push(colHeadName + ' sütununda hatalı string veya unit değerler var.');
    //         //     } else {
    //         //         $('#err_' + colHeadName).html(colHeadName);
    //         //     }
    //         // } else {
    //         //     // Diğer türler için özel karşılaştırmalar ekleyebilirsiniz
    //         // }

    //         // // Hata varsa, bu sütunun hasError özniteliğini true yapın
    //         // if (hasError) {
    //         //     $(this).attr("hasError", "true");
    //         // } else {
    //         //     $(this).attr("hasError", "false");
    //         // }
    //     });

    //     // Tüm seçim alanlarını kontrol edin
    //     $('.multiple_attr').each(function () {
    //         if ($(this).val() !== "0") {
    //             allNone = false;
    //         }
    //     });

    //     // Hata varsa veya hiçbir şey seçilmediyse PLM IMPORT butonunu etkinleştirin
    //     if (allNone || $('.multiple_attr[hasError="true"]').length > 0) {
    //         $('#excel_aktar_btn').attr("disabled", true);
    //     } else {
    //         $('#excel_aktar_btn').attr("disabled", false);
    //     }
    // });


    // console.log("Hata Listesi : " + errorList);

    // Sayısal bir değer olup olmadığını kontrol eden bir işlev
    function isNumeric(value) {
        return !isNaN(parseFloat(value)) && isFinite(value);
    }
</script>
